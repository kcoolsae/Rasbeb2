-- users teachers / organisers
------------------------------

CREATE TYPE role AS ENUM ('TEACHER', 'ORGANISER'); -- upper case for Java enums

CREATE TABLE users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- NOT nonzero?

    user_name TEXT NOT NULL,
    user_email TEXT UNIQUE NOT NULL, -- always trimmed lower case
    user_role ROLE NOT NULL,

    user_password_hash TEXT,
    user_password_salt TEXT,

    user_disabled BOOLEAN NOT NULL DEFAULT FALSE,

    when_created TIMESTAMP DEFAULT NOW(),
    who_created  INTEGER,
    when_updated TIMESTAMP,
    who_updated  INTEGER
);

CREATE TRIGGER update_user
    BEFORE UPDATE
    ON users
    FOR EACH ROW EXECUTE PROCEDURE update_when_modified();

CREATE TABLE teachers (
    user_id INTEGER PRIMARY KEY REFERENCES users, -- must have user_role = 'teacher'
    school_id INTEGER REFERENCES schools
);

-- registration / lost password
------------------------------

-- used as part of the registration procedure (teachers only)

CREATE TABLE registrations (
    user_email TEXT UNIQUE NOT NULL, -- always trimmed lower case
    school_id INTEGER REFERENCES schools,
    registration_token TEXT NOT NULL,
    registration_expires TIMESTAMP NOT NULL
);

-- used as part of the procedure for requesting a new password (teachers and organisers)

CREATE TABLE password_requests (
    user_email TEXT UNIQUE NOT NULL, -- always trimmed lower case
    request_token TEXT NOT NULL,
    request_expires TIMESTAMP NOT NULL
);

-- pupils
------------------

CREATE TYPE gender AS ENUM ('MALE', 'FEMALE', 'OTHER');

CREATE TABLE pupils (
    pupil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    pupil_name TEXT NOT NULL,
    pupil_gender GENDER,          -- NULL when anonymous
    pupil_password TEXT NOT NULL, -- blank when anonymous
    pupil_anonymous BOOLEAN DEFAULT FALSE,

    when_created TIMESTAMP DEFAULT NOW(),
    who_created  INTEGER,
    when_updated TIMESTAMP,
    who_updated  INTEGER
);

ALTER TABLE pupils ALTER COLUMN pupil_id RESTART WITH 12345;

CREATE TRIGGER update_pupil
    BEFORE UPDATE
    ON pupils
    FOR EACH ROW EXECUTE PROCEDURE update_when_modified();

--  people.sql
--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--  Copyright Â© 2023-2024 Kris Coolsaet (Universiteit Gent)
--
--  This software is distributed under the MIT License - see files LICENSE and AUTHORS
--  in the top level project directory.

-- pupils belong to classes
CREATE TABLE pupils_classes (
    pupil_id INTEGER REFERENCES pupils,
    class_id INTEGER REFERENCES classes,
    PRIMARY KEY (pupil_id, class_id)
)