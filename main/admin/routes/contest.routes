GET     /p/g/:contestId  controllers.contest.ContestController.getContest(request: Request, contestId: Int)
GET     /p/x           controllers.contest.ContestController.listContests(request: Request)
GET     /p/l           controllers.contest.ContestController.list(request: Request, psf: PSF)
POST    /p/r           controllers.contest.ContestController.resize(request: Request, psf: PSF)
POST    /p/a           controllers.contest.ContestController.action(request: Request, psf: PSF)
POST    /p/cs/:contestId controllers.contest.ContestController.updateContestStatus(request: Request, contestId: Int)

GET     /t/l/:contestId  controllers.contest.ContestToolsController.tools(request: Request, contestId: Int)
POST    /t/cp/:contestId controllers.contest.ContestToolsController.copyContest(request: Request, contestId: Int)
GET     /t/ql/:contestId/:lang controllers.contest.ContestToolsController.listLinks(request: Request, contestId: Int, lang: String)
GET     /t/w/:contestId controllers.contest.ContestToolsController.printWinners(request: Request, contestId: Integer)

GET     /t/a/:contestId   controllers.contest.ContestToolsController.showAnomalyTools(request: Request, contestId: Int)
GET     /t/ah/:contestId  controllers.contest.ContestToolsController.listAnomaliesHour(request: Request, contestId: Int)
GET     /t/ad/:contestId  controllers.contest.ContestToolsController.listAnomaliesDay(request: Request, contestId: Int)
GET     /t/aw/:contestId  controllers.contest.ContestToolsController.listAnomaliesWeekend(request: Request, contestId: Int)

GET     /t/pd/:contestId  controllers.contest.ContestToolsController.downloadParticipationSheet(request: Request, contestId: Int)

GET     /o/:contestId/:ageGroupId           controllers.contest.ContestOrderController.getQuestionSet(request: Request, contestId: Int, ageGroupId: Int)
POST    /o/:contestId/:ageGroupId/:n1/:n2   controllers.contest.ContestOrderController.updateOrder(request: Request, contestId: Int, ageGroupId: Int, n1: Int, n2: Int)
POST    /od/:contestId/:ageGroupId          controllers.contest.ContestOrderController.updateOrderByDifficulty(request: Request, contestId: Int, ageGroupId: Int)

GET     /g/s/:contestId  controllers.contest.ContestQuestionsController.questionSelection(request: Request, contestId: Int)
GET     /g/l/:contestId  controllers.contest.ContestQuestionsController.listQuestions(request: Request, psf: PSF, contestId: Int)
POST    /g/r/:contestId  controllers.contest.ContestQuestionsController.resizeQuestions(request: Request, psf: PSF, contestId: Int)
POST    /g/a/:contestId  controllers.contest.ContestQuestionsController.actionQuestions(request: Request, psf: PSF, contestId: Int)

GET     /s/:contestId/:ageGroupId   controllers.contest.ContestMarksController.getQuestionSet(request: Request, contestId: Int, ageGroupId: Int)
POST    /s/:contestId/:ageGroupId   controllers.contest.ContestMarksController.updateMarks(request: Request, contestId: Int, ageGroupId: Int)

GET     /n                 controllers.contest.ContestSettingsController.newContestForm(request: Request)
POST    /n                 controllers.contest.ContestSettingsController.newContest(request: Request)
GET     /st/:contestId     controllers.contest.ContestSettingsController.settingsForm(request: Request, contestId: Int)
POST    /st/t/:contestId   controllers.contest.ContestSettingsController.titleSettings(request: Request, contestId: Int)
POST    /st/a/:contestId   controllers.contest.ContestSettingsController.ageGroupSettings(request: Request, contestId: Int)

# TeacherContestController
GET     /tp/x           controllers.contest.TeacherContestController.listContests(request: Request)
GET     /tp/l           controllers.contest.TeacherContestController.list(request: Request, psf: PSF)
POST    /tp/r           controllers.contest.TeacherContestController.resize(request: Request, psf: PSF)
POST    /tp/a           controllers.contest.TeacherContestController.action(request: Request, psf: PSF)
GET     /tg/:contestId  controllers.contest.TeacherContestController.getContest(request: Request, contestId: Int)

GET     /tq/:lang/:contestId controllers.contest.TeacherContestController.showQuestions(request: Request, lang: String, contestId: Int)
GET     /tq/:lang/:contestId/:ageGroupId/:questionId   controllers.contest.TeacherContestController.getContestQuestion(request: Request, lang: String, contestId: Int, ageGroupId: Int, questionId: Int)

GET     /td/l/:contestId    controllers.contest.TeacherContestController.showParticipations(request: Request, contestId: Int)
GET     /td/d/:contestId    controllers.contest.TeacherContestController.downloadScores(request: Request, contestId: Int)
GET     /th/:contestId/:pId          controllers.contest.TeacherContestController.toggleHidden(request: Request, contestId: Int, pId: Int)

GET     /te/l/:contestId    controllers.contest.TeacherContestController.showEvents(request: Request, contestId: Int)
GET     /te/n/:contestId    controllers.contest.TeacherContestController.newEventForm(request: Request, contestId: Int)
POST    /te/n/:contestId    controllers.contest.TeacherContestController.newEvent(request: Request, contestId: Int)

